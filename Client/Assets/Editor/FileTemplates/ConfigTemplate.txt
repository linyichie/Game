using System.Collections.Generic;
using UnityEngine;
using System;
using System.Threading;

public partial class #ClassName# {
    #Fileds#

    static Dictionary<#KeyType#, #ClassName#> configs = new Dictionary<#KeyType#, #ClassName#>();

    private #ClassName#(string[] values) {
        try {
            #Parses#

            configs.Add(#KeyField#, this);
        }
        catch (System.Exception e) {
            Debug.LogError(string.Format("Config Parse Error : {0} key ==> {1} {2}", "#ClassName#", values[0], e.Message));
        }
    }

    public static #ClassName# Get(#KeyType# _key) {
        if (configs.ContainsKey(_key)) {
            return configs[_key];
        }

        return null;
    }

    public static void Parse(bool async, string content, Action callback) {
        if(async) {
            ThreadPool.QueueUserWorkItem(state => {
                var lines = content.Split(Const.SplitLine, StringSplitOptions.RemoveEmptyEntries);
                for (int i = 3; i < lines.Length; i++) {
                    var line = lines[i];
                    var values = line.Split('\t');
                    new #ClassName#(values);
                }
                callback?.Invoke();
            });
        } else {
            var lines = content.Split(Const.SplitLine, StringSplitOptions.RemoveEmptyEntries);
            for (int i = 3; i < lines.Length; i++) {
                var line = lines[i];
                var values = line.Split('\t');
                new #ClassName#(values);
            }
            callback?.Invoke();
        }
    }
    
    public static void Clear() {
        configs.Clear();
    }    
}